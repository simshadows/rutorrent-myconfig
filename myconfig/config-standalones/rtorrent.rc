#############################################################################
# Watch https://github.com/rakshasa/rtorrent/wiki/CONFIG-Template for possible
# configuration options.
#############################################################################

###################
# Instance Layout #
###################

## basedir will be set before this script runs.
#method.insert = cfg.basedir,      private|const|string, (cat, "PLACEHOLDER")

method.insert = cfg.sockdir,       private|const|string, (cat, (cfg.basedir), "instance-sockets/")
method.insert = cfg.sockfile,      private|const|string, (cat, (cfg.basedir), "rtorrent.sock")

method.insert = cfg.session,       private|const|string, (cat, (cfg.basedir), "session/")
method.insert = cfg.download,      private|const|string, (cat, (cfg.basedir), "data/")
method.insert = cfg.watch_start,   private|const|string, (cat, (cfg.basedir), "watch-start/")
method.insert = cfg.watch_normal,  private|const|string, (cat, (cfg.basedir), "watch-normal/")

method.insert = cfg.logs,          private|const|string, (cat, (cfg.basedir), "logs/")
method.insert = cfg.logfile,       private|const|string, (cat, (cfg.logs), "rtorrent-", (system.time), ".log")
method.insert = cfg.execlogfile,   private|const|string, (cat, (cfg.logs), "execute.log")
method.insert = cfg.xmlrpclogfile, private|const|string, (cat, (cfg.logs), "xmlrpc.log")

method.insert = cfg.pidfile,       private|const|string, (cat, (cfg.session), "rtorrent.pid")

# Create directories
# TODO: Find a better way.
execute.throw = bash, -c, (cat, "mkdir -p ", \
    (cfg.session),      " ", \
    (cfg.download),     " ", \
    (cfg.watch_start),  " ", \
    (cfg.watch_normal), " ", \
    (cfg.logs))

system.cwd.set = (cfg.basedir)
system.umask.set = 0133

###########
# Logging #
###########

print         = (cat, "Logging to ", (cfg.logfile))
log.open_file = "log", (cfg.logfile)

# Each 'log.add_output' adds to the scope of a named log file.
# The scope is specified in the format <group>_<level>.
#    Levels = critical error warn notice info debug
#    Groups = connection_* dht_* peer_* rpc_* storage_* thread_* tracker_* torrent_*
# Example:
#    log.add_output = "tracker_debug", "log"

log.add_output   = "info", "log"

log.execute      = (cfg.execlogfile)
log.xmlrpc       = (cfg.xmlrpclogfile)

#########################
# Other Config Commands #
#########################

session.path.set      = (cfg.session)
directory.default.set = (cfg.download)

# Write PID file
execute.nothrow       = bash, -c, (cat, "echo >", (cfg.pidfile), " ", (system.pid))

# Watch directory load scheduling ('.torrent' files are loaded in every 10 seconds.)
schedule2 = watch_start,  10, 10, ((load.start,  (cat, (cfg.watch_start),  "*.torrent")))
schedule2 = watch_normal, 11, 10, ((load.normal, (cat, (cfg.watch_normal), "*.torrent")))

# Listening port for incoming peer traffic
network.port_range.set = 50000-50000
network.port_random.set = no

# Tracker-less torrent and UDP tracker support
# (Conservative settings suitable for private trackers.)
dht.mode.set = disable
protocol.pex.set = no
trackers.use_udp.set = no

# Peer settings
# TODO: These settings are small, which is more suitable for testing my raspberry pi.
#       Make them bigger when I get better hardware!
throttle.max_uploads.set        = 60
throttle.max_uploads.global.set = 60

throttle.min_peers.normal.set   = 1
throttle.max_peers.normal.set   = 60
throttle.min_peers.seed.set     = 1
throttle.max_peers.seed.set     = 60
trackers.numwant.set            = 20

protocol.encryption.set = allow_incoming,try_outgoing,enable_retry

# Limits for file handle resources, this is optimized for
# an `ulimit` of 1024 (a common default). You MUST leave
# a ceiling of handles reserved for rTorrent's internal needs!
# TODO: Further optimize later.
network.http.max_open.set = 50
network.max_open_files.set = 600
network.max_open_sockets.set = 300

# Memory resource usage (increase if you have a large number of items loaded,
# and/or the available resources to spend)
# TODO: Further optimize later.
pieces.memory.max.set = 300M
network.xmlrpc.size_limit.set = 4M

# Other operational settings
encoding.add = utf8
network.http.dns_cache_timeout.set = 25
##network.http.capath.set = "/etc/ssl/certs"
##network.http.ssl_verify_peer.set = 0
##network.http.ssl_verify_host.set = 0
##pieces.hash.on_completion.set = no
##keys.layout.set = qwerty

##view.sort_current = seeding, greater=d.ratio=

# TODO: What does this do?
schedule2 = monitor_diskspace, 15, 60, ((close_low_diskspace, 1000M))

# Some additional values and commands
method.insert = system.startup_time, value|const, (system.time)
method.insert = d.data_path, simple,\
    "if=(d.is_multi_file),\
        (cat, (d.directory), /),\
        (cat, (d.directory), /, (d.name))"
method.insert = d.session_file, simple, "cat=(session.path), (d.hash), .torrent"

# SCGI
execute.nothrow = rm,~/socket/rtorrent.sock
network.scgi.open_local = /home/sys-rtorrent/socket/rtorrent.sock
